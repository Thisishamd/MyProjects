# -*- coding: utf-8 -*-
"""Prediction of Sales using Random Forest Regressor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15oHMIBmz3K2O6GVFSj7Z9CDfyxELAtC0

**Prediction of Sales using Random Forest Regressor**

Objectives of this project -

Data Source - https://raw.githubusercontent.com/YBIFoundation/Dataset/refs/heads/main/Big%20Sales%20Data.csv

Step 1) Importing Libraries
"""

import pandas as pd

import numpy as np

"""Step 2) Importing Data"""

DataF = pd.read_csv('https://raw.githubusercontent.com/YBIFoundation/Dataset/refs/heads/main/Big%20Sales%20Data.csv')

"""Step 3) Describing the Data"""

DataF.head()

DataF.describe()

DataF.info()

"""Step 4) Data Preprocessing"""

DataF.columns

DataF['Item_Weight'].fillna(DataF.groupby(['Item_Type'])['Item_Weight'].transform('mean'),inplace=True)

DataF.info()

DataF.describe()

import seaborn as seab
seab.pairplot(DataF)

"""## Defining Categories"""

DataF[['Item_Identifier']].value_counts()

DataF[['Item_Fat_Content']].value_counts()

DataF.replace({'Item_Fat_Content': {'LF':'Low Fat' , 'reg' : 'Regular', 'low fat' : 'Low Fat' }}, inplace=True)

DataF[['Item_Fat_Content']].value_counts()

DataF.replace({'Item_Fat_Content': {'Low Fat' : 0 , 'Regular' : 1}}, inplace=True)

DataF[['Item_Type']].value_counts()

DataF.replace({'Item_Type':{'Fruits and Vegetables':0,'Snack Foods':0, 'Household':1, 'Frozen Foods':0,'Dairy':0, 'Baking Goods':0, 'Canned':0, 'Health and Hygiene':1, 'Meat':0, 'Soft Drinks':0, 'Breads':0, 'Hard Drinks':0, 'Others':2, 'Starchy Foods':0, 'Breakfast':0, 'Seafood':0 }}, inplace=True)

DataF[['Item_Type']].value_counts()

DataF[['Outlet_Identifier']].value_counts()

DataF.replace({'Outlet_Identifier': {'OUT027':0, 'OUT013': 1, 'OUT049':2, 'OUT046':3, 'OUT035':4, 'OUT045':5, 'OUT018':6, 'OUT017':7, 'OUT010':8, 'OUT019':9,}},inplace=True)

DataF[['Outlet_Identifier']].value_counts()

DataF[['Outlet_Size']].value_counts()

DataF.replace({'Outlet_Size': {'Small': 0, 'Medium': 1, 'High' :2}}, inplace=True)

DataF[['Outlet_Size']].value_counts()

DataF[['Outlet_Location_Type']].value_counts()

DataF.replace({'Outlet_Location_Type':{'Tier 1':0, 'Tier 2':1, 'Tier 3': 2}}, inplace=True)

DataF[['Outlet_Location_Type']].value_counts()

DataF[['Outlet_Type']].value_counts()

DataF.replace({'Outlet_Type':{'Grocery Store':0, 'Supermarket Type1':1, 'Supermarket Type2':2, 'Supermarket Type3':3}}, inplace=True)

DataF[['Outlet_Type']].value_counts()

DataF.head()

DataF.info()

"""Getting the Shape of DataFrame"""

DataF.shape

"""Defining Y"""

y = DataF['Item_Outlet_Sales']

y.shape

y

X = DataF[['Item_Weight','Item_Fat_Content', 'Item_Visibility', 'Item_Type', 'Item_MRP', 'Outlet_Identifier', 'Outlet_Establishment_Year', 'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type']]

X = DataF.drop(['Item_Identifier', 'Item_Outlet_Sales'], axis=1)

X.shape

X

"""Getting X Variables Standardized"""

from sklearn.preprocessing import StandardScaler

sc= StandardScaler()

X_std = DataF[['Item_Weight', 'Item_Visibility','Item_MRP', 'Outlet_Establishment_Year' ]]

X_std = sc.fit_transform(X_std)

X_std

X[['Item_Weight', 'Item_Visibility', 'Item_MRP', 'Outlet_Establishment_Year']] =  pd.DataFrame(X_std, columns = [['Item_Weight', 'Item_Visibility', 'Item_MRP', 'Outlet_Establishment_Year']])

X

"""Getting Train Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test, = train_test_split(X,y, test_size= 0.1, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""Getting Model Train"""

from sklearn.ensemble import RandomForestRegressor

rfr = RandomForestRegressor(random_state=2529)

rfr.fit(X_train, y_train)

"""Getting Model Prediction"""

y_pred = rfr.predict(X_test)

y_pred.shape

y_pred

"""Getting Model Evaluation"""

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mean_squared_error(y_test, y_pred)

mean_absolute_error(y_test, y_pred)

r2_score(y_test, y_pred)

"""Getting the Visualization of Actual VS Predicted Results"""

import matplotlib.pyplot as plt
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""**Explaination** - In this project, I developed a sales prediction model using Google Colab. I employed a Random Forest Regressor for prediction, utilizing Pandas for data handling, Numpy for numerical operations, and StandardScaler from sklearn to normalize the feature set. The model aims to provide accurate sales forecasts by learning from historical data and adjusting for scale using StandardScaler to enhance model performance."""
